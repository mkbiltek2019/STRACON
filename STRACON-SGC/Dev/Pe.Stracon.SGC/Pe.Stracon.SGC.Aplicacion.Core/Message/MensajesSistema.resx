<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FlujoAprobacionEstadioDescripcionExiste" xml:space="preserve">
    <value>Ya existe un estadio con la misma Descripción.</value>
  </data>
  <data name="FlujoAprobacionEstadioExiste" xml:space="preserve">
    <value>Ya existe un estadio con los mismos datos de Orden de Prioridad y Descripción</value>
  </data>
  <data name="FlujoAprobacionEstadioOrdenExiste" xml:space="preserve">
    <value>Ya existe un estadio con el mismo orden de prioridad</value>
  </data>
  <data name="FlujoAprobacionExiste" xml:space="preserve">
    <value>Ya existe un flujo de aprobación con los mismos datos.</value>
  </data>
  <data name="PlantillaExiste" xml:space="preserve">
    <value>No puede registrar una combinación ya existente.</value>
  </data>
  <data name="PlantillaFechaInicioVigenciaMenor" xml:space="preserve">
    <value>No puede registrar una Fecha de Inicio de Vigencia menor a la que ya existe.</value>
  </data>
  <data name="PlantillaFechaInicioVigenciIncorrecto" xml:space="preserve">
    <value>El formato de la Fecha de Inicio de Vigencia es incorrecto.</value>
  </data>
  <data name="ProcesoAuditoriaExiste" xml:space="preserve">
    <value>Unidad Operativa Y  Fecha planificada, no pueden tener datos iguales.</value>
  </data>
  <data name="CopiarEstadioIgual" xml:space="preserve">
    <value>No se puede copiar los estadios de un mismo registro</value>
  </data>
  <data name="CopiarEstadioNoTiene" xml:space="preserve">
    <value>Elija otro registro, este no contiene estadios</value>
  </data>
  <data name="CopiarEstadioNoExiste" xml:space="preserve">
    <value>El registro no existe</value>
  </data>
  <data name="PlantillaParrafoExiste" xml:space="preserve">
    <value>Ya existe un Párrafo con el mismo Orden y Título para la Plantilla.</value>
  </data>
  <data name="PlantillaParrafoOrdenExiste" xml:space="preserve">
    <value>El Orden del Párrafo ya se encuentra registrada para esta Plantilla.</value>
  </data>
  <data name="PlantillaParrafoTituloExiste" xml:space="preserve">
    <value>El Título del Párrafo ya se encuentra registrada para esta Plantilla.</value>
  </data>
  <data name="FlujoAprobacionFormaEdicionNoExiste" xml:space="preserve">
    <value>No se ha configurado un Flujo de Aprobación para la Forma de Edición {0}.</value>
  </data>
  <data name="FlujoAprobacionOrdenIgualUno" xml:space="preserve">
    <value>Debe establecer un Orden mayor a 1.</value>
  </data>
  <data name="FlujoAprobacionNoExiste" xml:space="preserve">
    <value>No existe un Flujo de Aprobación con la Unidad Operativa, Tipo de Contrato, Tipo de Requerimiento ingresado.</value>
  </data>
  <data name="PlantillaFlujoAprobacionNoExiste" xml:space="preserve">
    <value>No existe una Plantilla ni un Flujo de Aprobación para la combinación ingresada.</value>
  </data>
  <data name="PlantillaNoExiste" xml:space="preserve">
    <value>No existe una Plantilla con el Tipo de Servicio, Tipo de Requerimiento, Tipo de Documento y Tipo Adhesión ingresado.</value>
  </data>
  <data name="EtiquetaError" xml:space="preserve">
    <value>Ocurrió un error inesperado. Inténtelo nuevamente.</value>
  </data>
  <data name="PlantillaParrafoNoExiste" xml:space="preserve">
    <value>No existe un Párrafo para la Plantilla seleccionada.</value>
  </data>
  <data name="FlujoAprobacionNoExisteReporte" xml:space="preserve">
    <value>No existe un Flujo de Aprobación con la Unidad Operativa, Tipo de Contrato, Tipo de Requerimiento y Forma de Edición ingresado.</value>
  </data>
  <data name="PlantillaNoEliminar" xml:space="preserve">
    <value>No se puede eliminar, existen contratos asociados a esta plantilla.</value>
  </data>
  <data name="PlantillaNoModificar" xml:space="preserve">
    <value>No se puede modificar, existen contratos asociados a esta plantilla.</value>
  </data>
  <data name="FirmanteNoValido" xml:space="preserve">
    <value>Los firmantes ya están completos o el orden de firmante ya existe.</value>
  </data>
  <data name="PlantillaNotaOrdenExiste" xml:space="preserve">
    <value>El orden de la nota ya se encuentra registrado para esta plantilla.</value>
  </data>
  <data name="ValidaMoneda" xml:space="preserve">
    <value>El tipo de moneda seleccionado no es el mismo que del contrato principal, para evitar errores en el monto acumulado debe seleccionar el tipo de moneda correcto.</value>
  </data>
</root>